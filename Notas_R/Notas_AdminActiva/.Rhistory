# *Titulos*    : Titulos comprados en la operacion.
# *Titulos_a*  : Titulos acumulados.
# *Operacion*  : Indicativo de Compra (1), Mantener (0), Venta (-1).
# *Comisiones* : 0.0025 o 0.25% por el valor de la transaccion.
# *Mensaje*    : Un texto que indique alguna decision o indicativo de que ocurrio algo.
Regla0_R <- -0.01  # Considerar una oportunidad de compra en un rendimiento de -3% o menor.
Regla1_I <- 0.80   # Porcentaje de capital para comprar titulos para posicion Inicial.
Regla2_P <- 0.10   # Se utiliza el P% del L capital restante en cada compra.
Regla3_W <- tk_completos # Se realiza la misma estrategia para todos los activos en el portafolio.
Regla4_C <- 0.0025 # Comisiones pagadas por compra.
Regla5_K <- 100000 # Capital Inicial.
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- Calcular los Titulos de posicion inicial
Historico$Titulos[1] <- (Regla5_K*Regla1_I)%/%Historico$Precio[1]
# -- Calcular los titulos acumulados
Historico$Titulos_a[1] <- Historico$Titulos[1]
# -- Se calculan comisiones iniciales
Historico$Comisiones[1] <- Historico$Titulos[1]*Historico$Precio[1]*Regla4_C
# -- Se calculan comisiones acumuladas
Historico$Comisiones_a[1] <- Historico$Comisiones[1]
# -- Calcular el valor Flotante de la posicion
Historico$Flotante[1] <- Historico$Titulos_a[1]*Historico$Precio[1]
# -- Todo remanente se dejara registrado en la cuenta de efectivo.
Historico$Capital[1] <- Regla5_K-Historico$Flotante[1]-Historico$Comisiones[1]
# -- Calcular el Balance
Historico$Balance[1] <- Historico$Flotante[1] + Historico$Capital[1]
# -- Iniciamos con una postura de mantener.
Historico$Operacion[1] <- 1
# -- El rendimiento de capital en el tiempo 1 es 0
Historico$R_Cuenta[1] <- 0
# -- Mensaje inicial
Historico$Mensaje[1] <- "Inicializacion de cartera"
# -- Calcular R_Precio
Historico$R_Precio <- round(c(0, diff(log(Historico$Precio))),4)
# -- Calcular R_Activo
PosturaInicial <- Regla5_K%/%Historico$Precio[1]
for(i in 1:length(Historico$Date)){
Historico$R_Activo[i] <- (PosturaInicial*Historico$Precio[i])/(PosturaInicial*Historico$Precio[1]) - 1
}
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
for(i in 2:length(Historico$Date)){
if(Historico$R_Precio[i] <= Regla0_R){ # Generar Señal
if(Historico$Capital[i-1] > 0) { # Si hay suficiente capital desde el dia anterior
if(Historico$Capital[i-1]*Regla2_P > Historico$Precio[i]) { # Si hay capital minimo para 1 operacion
Historico$Mensaje[i] <- "Señal de Compra Ejecutada"
Historico$Operacion[i] <- 1
Historico$Titulos[i] <- (Historico$Capital[i-1]*Regla2_P)%/%Historico$Precio[i]
Historico$Titulos_a[i] <- Historico$Titulos_a[i-1]+Historico$Titulos[i]
Historico$Comisiones[i] <- Historico$Precio[i]*Historico$Titulos[i]*Regla4_C
Historico$Comisiones_a[i] <- Historico$Comisiones_a[i-1] + Historico$Comisiones[i]
Historico$Flotante[i] <- Historico$Precio[i]*Historico$Titulos_a[i]
Historico$Capital[i] <- Historico$Capital[i-1] - Historico$Titulos[i]*Historico$Precio[i] - Historico$Comisiones[i]
Historico$Balance[i] <- Historico$Capital[i] + Historico$Flotante[i]
Historico$R_Cuenta[i] <- Historico$Balance[i]/Regla5_K - 1
}
else { # No hubo capital minimo para 1 operacion
Historico$Mensaje[i] <- "Hubo Señal pero no hubo capital minimo para 1 operacion"
Historico$Operacion[i] <- 0
Historico$Titulos[i] <- 0
Historico$Comisiones[i] <- 0
Historico$Comisiones_a[i] <- Historico$Comisiones_a[i-1]
Historico$Titulos_a[i] <- Historico$Titulos_a[i-1]
Historico$Flotante[i] <- Historico$Titulos_a[i]*Historico$Precio[i]
Historico$Capital[i] <- Historico$Capital[i-1]
Historico$Balance[i] <- Historico$Flotante[i] + Historico$Capital[i]
Historico$R_Cuenta[i] <- Historico$Balance[i]/Regla5_K - 1
}
}
else { # No hubo capital
Historico$Mensaje[i] <- "Hubo Señal pero no hubo capital"
Historico$Operacion[i] <- 0
Historico$Titulos[i] <- 0
Historico$Comisiones[i] <- 0
Historico$Comisiones_a[i] <- Historico$Comisiones_a[i-1]
Historico$Titulos_a[i] <- Historico$Titulos_a[i-1]
Historico$Flotante[i] <- Historico$Titulos_a[i]*Historico$Precio[i]
Historico$Capital[i] <- Historico$Capital[i-1]
Historico$Balance[i] <- Historico$Flotante[i] + Historico$Capital[i]
Historico$R_Cuenta[i] <- Historico$Balance[i]/Regla5_K - 1
}
}
else { # Sin señal
Historico$Mensaje[i] <- "Sin Señal"
Historico$Operacion[i] <- 0
Historico$Titulos[i] <- 0
Historico$Comisiones[i] <- 0
Historico$Comisiones_a[i] <- Historico$Comisiones_a[i-1]
Historico$Titulos_a[i] <- Historico$Titulos_a[i-1]
Historico$Flotante[i] <- Historico$Titulos_a[i]*Historico$Precio[i]
Historico$Capital[i] <- Historico$Capital[i-1]
Historico$Balance[i] <- Historico$Flotante[i] + Historico$Capital[i]
Historico$R_Cuenta[i] <- Historico$Balance[i]/Regla5_K - 1
}
}
View(Historico)
fechas <- as.character(Historico$Date)
fechas
# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()
# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")
# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")
# -- Cargar y/o instalar en automatico paquetes a utilizar -- #
pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
"gridExtra","httr","jsonlite","lmtest","lubridate","moments",
"matrixStats", "PerformanceAnalytics","plyr","quantmod",
"reshape2","RCurl", "stats","scales","tseries",
"TTR","TSA","XML","xts","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- Cargar archivos desde GitHub -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- Parametros para usar API-OANDA
# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "America/Mexico_City"
# Instrumento
OA_In <- "EUR_USD"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "H4"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = NULL, End = NULL, Count = 900)
View(Precios_Oanda)
Fechas <- as.character(Precios_Oanda$TimeStamp)
Fechas[1]
D1_F <- as.character(Precios_Oanda$TimeStamp)
D2_P <- Precios_Oanda$Close
D1_F <- as.character(Precios_Oanda$TimeStamp)
D2_P <- Precios_Oanda$Close
plot_ly(Historico) %>%
add_trace(x = ~D1_F, y = ~D2_P, type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red'))%>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
plot_ly(Precios_Oanda) %>%
add_trace(x = ~as.character(Precios_Oanda$TimeStamp), y = ~Precios_Oanda$Close,
type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red'))%>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
plot_ly(Precios_Oanda) %>%
add_trace(x = ~as.character(Precios_Oanda$TimeStamp), y = ~Precios_Oanda$Close,
type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~as.character(Precios_Oanda$TimeStamp), y = ~SMA(Precios_Oanda$Close,10),
type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
SMA(Precios_Oanda$Close,10)
plot_ly(Precios_Oanda) %>%
add_trace(x = ~as.character(Precios_Oanda$TimeStamp), y = ~Precios_Oanda$Close,
type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~as.character(Precios_Oanda$TimeStamp), y = ~SMA(Precios_Oanda$Close,10),
type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# Remover todos los objetos del "Environment"
rm(list = ls())
# los 0s aceptados antes de expresas una cifra en notaci?n cient?fica
#options("scipen"=100, "digits"=4)
# Cargas librerias a utilizar
suppressMessages(library(plotly)) # Graficas interactivas
suppressMessages(library(Quandl)) # Descargar Precios
suppressMessages(library(ROI))    # Optimizacion para portafolio
suppressMessages(library(knitr))  # Opciones de documentaci?n + c?digo
suppressMessages(library(openxlsx))   # Leer archivos XLSx
suppressMessages(library(kableExtra)) # Tablas en HTML
suppressMessages(library(PortfolioAnalytics)) # Teoria Moderna de Portafolios
options(knitr.table.format = "html")
# Cargar el token de QUANDL
Quandl.api_key("dN9QssXxzTxndaqKUQ_i")
# Funcion para descagar precios
Bajar_Precios <- function(Columns, Tickers, Fecha_In, Fecha_Fn) {
# Funcion para descargar N cantidad de activos desde QUANDL
# -- Dependencias: QUANDL
# -- Columns : columnas a incluir : character : c("date", "adj_close", ... )
# -- Tickers : Tickers o claves de pizarra de los activos : character : "TSLA"
# -- Fecha_In : Fecha Inicial : character : "2017-01-02"
# -- Fecha_Fn : Fecha Final : character : "2017-08-02"
# Peticion para descargar precios
Datos <- Quandl.datatable("WIKI/PRICES", qopts.columns=Columns,
ticker=Tickers,
date.gte=Fecha_In, date.lte=Fecha_Fn)
return(Datos)
}
# Tickers de acciones contenidas en ETF-IAK
Datos_ETF <- read.xlsx("IAK_holdings.xlsx", sheet = 1)
tk <- as.character(na.omit(Datos_ETF[which(Datos_ETF[,1] == "Ticker")+1:length(Datos_ETF[,1]),1]))
cs <- c("date", "adj_close")
# Fecha inicial y fecha final
fs <- c("2016-09-01", "2018-09-01")
# Descargar Precios
Datos <- list()
for(i in 1:length(tk)) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
names(Datos) <- tk
# Cambiar el orden de los datos que previamente descargamos
for(i in 1:length(tk)){
Datos[[i]]<-Datos[[i]][order(Datos[[i]][,1]), ]
}
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
longitudes <- c()
for(i in 1:length(Datos)){
longitudes[i] <- length(Datos[[i]]$date)
}
maximo <- max(longitudes)
completos <- which(longitudes == maximo)
View(Datos_ETF)
View(Datos_ETF)
View(Datos)
DatosN <- Datos[completos]
View(DatosN)
# Vector para almacenar columnas de interes
columnas <- c()
nuevos   <- c()
# Funci?n para repetir una funci?n por cada columna del data.frame
Precios <- do.call(cbind, DatosN)
View(Precios)
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# Remover todos los objetos del "Environment"
rm(list = ls())
# los 0s aceptados antes de expresas una cifra en notacion cientifica
# options("scipen"=100, "digits"=4)
# Cargas librerias a utilizar
suppressMessages(library(plotly)) # Graficas interactivas
suppressMessages(library(Quandl)) # Descargar Precios
suppressMessages(library(ROI))    # Optimizacion para portafolio
suppressMessages(library(knitr))  # Opciones de documentacion + codigo
suppressMessages(library(openxlsx))           # Leer archivos XLSx
suppressMessages(library(kableExtra))         # Tablas en HTML
suppressMessages(library(PortfolioAnalytics)) # Teoria Moderna de Portafolios
options(knitr.table.format = "html")
# -- ---------------------------------------------------------------- DataFrame de Operaciones -- #
# -- ---------------------------------------------------------------- ------------------------ -- #
# -- DataFrame para actualizar informacion de operaciones ejecutadas
df_operaciones <- data.frame("Fecha" = 0, "Operacion" = 0, "Titulos" = 0,
"Ticker" = 0, "Precio_ejecucion" = 0, "Comisiones" = 0)
# -- --------------------------------------------------------------------- DataFrame de Cuenta -- #
# -- --------------------------------------------------------------------- ------------------- -- #
# -- DataFrame para actualizar informacion de cuenta
df_cuenta <- data.frame("Fecha" = 0,
"Efectivo" = 0, "Flotante" = 0, "Balance" = 0,
"Comisiones_d" = 0, "Comisiones_a" = 0, "Mensaje" = "")
View(df_cuenta)
# Cargar el token de QUANDL
Quandl.api_key("dN9QssXxzTxndaqKUQ_i")
# Funcion para descagar precios
Bajar_Precios <- function(Columns, Tickers, Fecha_In, Fecha_Fn) {
# Funcion para descargar N cantidad de activos desde QUANDL
# -- Dependencias: QUANDL
# -- Columns : columnas a incluir : character : c("date", "adj_close", ... )
# -- Tickers : Tickers o claves de pizarra de los activos : character : "TSLA"
# -- Fecha_In : Fecha Inicial : character : "2017-01-02"
# -- Fecha_Fn : Fecha Final : character : "2017-08-02"
# Peticion para descargar precios
Datos <- Quandl.datatable("WIKI/PRICES", qopts.columns=Columns,
ticker=Tickers,
date.gte=Fecha_In, date.lte=Fecha_Fn)
return(Datos)
}
setwd("/media/franciscome/DATA/GitHub/MyST/Notas_R/Notas_AdminActiva")
Datos_ETF <- read.csv("Datos/IAK_holdings.csv")
Datos_ETF <- read.csv("Datos/IAK_holdings.csv",row.names = NULL, skip = 10, stringsAsFactors = FALSE)
View(Datos_ETF)
View(Datos_ETF)
tk <- as.character(na.omit(Datos_ETF$Ticker))
tk <- Datos_ETF$Ticker)
tk <- Datos_ETF$Ticker
class(tk)
tk
# Tickers de acciones contenidas en ETF-IAK
Datos_ETF <- read.csv("Datos/IAK_holdings.csv", row.names=NULL, skip=10, stringsAsFactors=FALSE)
tk <- Datos_ETF$Ticker
cs <- c("date", "open","high","low","close")
# Fecha inicial y fecha final
fs <- c("2017-01-01", "2018-01-01")
# Descargar Precios
Datos <- list()
for(i in 1:length(tk)) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
names(Datos) <- tk
View(Datos)
# Cambiar el orden de los datos que previamente descargamos
for(i in 1:length(tk)){
Datos[[i]]<-Datos[[i]][order(Datos[[i]][,1]), ]
}
View(Datos)
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# Remover todos los objetos del "Environment"
rm(list = ls())
# los 0s aceptados antes de expresas una cifra en notacion cientifica
# options("scipen"=100, "digits"=4)
# Cargas librerias a utilizar
suppressMessages(library(plotly)) # Graficas interactivas
suppressMessages(library(Quandl)) # Descargar Precios
suppressMessages(library(ROI))    # Optimizacion para portafolio
suppressMessages(library(knitr))  # Opciones de documentacion + codigo
suppressMessages(library(openxlsx))           # Leer archivos XLSx
suppressMessages(library(kableExtra))         # Tablas en HTML
suppressMessages(library(PortfolioAnalytics)) # Teoria Moderna de Portafolios
options(knitr.table.format = "html")
# -- ---------------------------------------------------------------- DataFrame de Operaciones -- #
# -- ---------------------------------------------------------------- ------------------------ -- #
# -- DataFrame para actualizar informacion de operaciones ejecutadas
df_operaciones <- data.frame("Fecha" = 0, "Operacion" = 0, "Titulos" = 0,
"Ticker" = 0, "Precio_ejecucion" = 0, "Comisiones" = 0)
# -- --------------------------------------------------------------------- DataFrame de Cuenta -- #
# -- --------------------------------------------------------------------- ------------------- -- #
# -- DataFrame para actualizar informacion de cuenta
df_cuenta <- data.frame("Fecha" = 0,
"Efectivo" = 0, "Flotante" = 0, "Balance" = 0,
"Comisiones_d" = 0, "Comisiones_a" = 0, "Mensaje" = "")
# Cargar el token de QUANDL
Quandl.api_key("dN9QssXxzTxndaqKUQ_i")
# Funcion para descagar precios
Bajar_Precios <- function(Columns, Tickers, Fecha_In, Fecha_Fn) {
# Funcion para descargar N cantidad de activos desde QUANDL
# -- Dependencias: QUANDL
# -- Columns : columnas a incluir : character : c("date", "adj_close", ... )
# -- Tickers : Tickers o claves de pizarra de los activos : character : "TSLA"
# -- Fecha_In : Fecha Inicial : character : "2017-01-02"
# -- Fecha_Fn : Fecha Final : character : "2017-08-02"
# Peticion para descargar precios
Datos <- Quandl.datatable("WIKI/PRICES", qopts.columns=Columns,
ticker=Tickers,
date.gte=Fecha_In, date.lte=Fecha_Fn)
return(Datos)
}
# Tickers de acciones contenidas en ETF-IAK
Datos_ETF <- read.csv("Datos/IAK_holdings.csv", row.names=NULL, skip=10, stringsAsFactors=FALSE)
tk <- Datos_ETF$Ticker
cs <- c("date", "open","high","low","close")
# Fecha inicial y fecha final
fs <- c("2017-01-01", "2018-01-01")
# Descargar Precios
Datos <- list()
for(i in 1:length(tk)) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
names(Datos) <- tk
# Cambiar el orden de los datos que previamente descargamos
for(i in 1:length(tk)){
Datos[[i]]<-Datos[[i]][order(Datos[[i]][,1]), ]
}
# -- ----------------------------------------------------------------------------------------- -- #
# -- Laboratorio 2: Administracion Activa ---------------------------------------------------- -- #
# -- Carrera: Ingenieria Financiera ITESO ---------------------------------------------------- -- #
# -- Materia: Microestructura y Sistemas de trading ------------------------------------------ -- #
# -- Desarrolla: Francisco Munoz -- franciscome@iteso.mx ------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# Remover todos los objetos del "Environment"
rm(list = ls())
# los 0s aceptados antes de expresas una cifra en notacion cientifica
# options("scipen"=100, "digits"=4)
# Cargas librerias a utilizar
suppressMessages(library(plotly)) # Graficas interactivas
suppressMessages(library(Quandl)) # Descargar Precios
suppressMessages(library(ROI))    # Optimizacion para portafolio
suppressMessages(library(knitr))  # Opciones de documentacion + codigo
suppressMessages(library(openxlsx))           # Leer archivos XLSx
suppressMessages(library(kableExtra))         # Tablas en HTML
suppressMessages(library(PortfolioAnalytics)) # Teoria Moderna de Portafolios
options(knitr.table.format = "html")
# Cargar el token de QUANDL
Quandl.api_key("dN9QssXxzTxndaqKUQ_i")
# Funcion para descagar precios
Bajar_Precios <- function(Columns, Tickers, Fecha_In, Fecha_Fn) {
# Funcion para descargar N cantidad de activos desde QUANDL
# -- Dependencias: QUANDL
# -- Columns : columnas a incluir : character : c("date", "adj_close", ... )
# -- Tickers : Tickers o claves de pizarra de los activos : character : "TSLA"
# -- Fecha_In : Fecha Inicial : character : "2017-01-02"
# -- Fecha_Fn : Fecha Final : character : "2017-08-02"
# Peticion para descargar precios
Datos <- Quandl.datatable("WIKI/PRICES", qopts.columns=Columns,
ticker=Tickers,
date.gte=Fecha_In, date.lte=Fecha_Fn)
return(Datos)
}
# Tickers de acciones contenidas en ETF-IAK
Datos_ETF <- read.csv("Datos/IAK_holdings.csv", row.names=NULL, skip=10, stringsAsFactors=FALSE)
tk <- Datos_ETF$Ticker
cs <- c("date", "open","high","low","close")
# Fecha inicial y fecha final
fs <- c("2017-01-01", "2018-01-01")
View(Datos_ETF)
# -- ----------------------------------------------------------------------------------------- -- #
# -- Laboratorio 2: Administracion Activa ---------------------------------------------------- -- #
# -- Carrera: Ingenieria Financiera ITESO ---------------------------------------------------- -- #
# -- Materia: Microestructura y Sistemas de trading ------------------------------------------ -- #
# -- Desarrolla: Francisco Munoz -- franciscome@iteso.mx ------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# Remover todos los objetos del "Environment"
rm(list = ls())
# los 0s aceptados antes de expresas una cifra en notacion cientifica
# options("scipen"=100, "digits"=4)
# Cargas librerias a utilizar
suppressMessages(library(plotly)) # Graficas interactivas
suppressMessages(library(Quandl)) # Descargar Precios
suppressMessages(library(ROI))    # Optimizacion para portafolio
suppressMessages(library(knitr))  # Opciones de documentacion + codigo
suppressMessages(library(openxlsx))           # Leer archivos XLSx
suppressMessages(library(kableExtra))         # Tablas en HTML
suppressMessages(library(PortfolioAnalytics)) # Teoria Moderna de Portafolios
options(knitr.table.format = "html")
# Cargar el token de QUANDL
Quandl.api_key("dN9QssXxzTxndaqKUQ_i")
# Funcion para descagar precios
Bajar_Precios <- function(Columns, Tickers, Fecha_In, Fecha_Fn) {
# Funcion para descargar N cantidad de activos desde QUANDL
# -- Dependencias: QUANDL
# -- Columns : columnas a incluir : character : c("date", "adj_close", ... )
# -- Tickers : Tickers o claves de pizarra de los activos : character : "TSLA"
# -- Fecha_In : Fecha Inicial : character : "2017-01-02"
# -- Fecha_Fn : Fecha Final : character : "2017-08-02"
# Peticion para descargar precios
Datos <- Quandl.datatable("WIKI/PRICES", qopts.columns=Columns,
ticker=Tickers,
date.gte=Fecha_In, date.lte=Fecha_Fn)
return(Datos)
}
# Precios a solicitar con QUANDL
cs <- c("date", "open","high","low","close")
# Fechas para analizar este caso
fs <- c("2017-01-01", "2018-01-01")
# Leer archivo con informacion del ETF
Datos_ETF <- read.csv("Datos/IAK_holdings.csv", row.names=NULL, skip=10, stringsAsFactors=FALSE)
# Descargar Precios
Datos <- list()
for(i in 1:length(tk)) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
names(Datos) <- tk
# guardar tickers
tk <- Datos_ETF$Ticker
# Descargar Precios
Datos <- list()
for(i in 1:length(tk)) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
View(Datos_ETF)
# Precios a solicitar con QUANDL
cs <- c("date","open","low","close")
fs <- c("2017-01-01", "2018-01-01")
# Leer archivo con informacion del ETF
Datos_ETF <- read.csv("Datos/IAK_holdings.csv", row.names=NULL, skip=10, stringsAsFactors=FALSE)
# guardar tickers
tk <- Datos_ETF$Ticker
# Descargar Precios
Datos <- list()
for(i in 1:length(tk)) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
for(i in 1:length(tk)-55) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
cs <- c("date","adj_close")
# Fechas para analizar este caso
fs <- c("2017-01-01", "2018-01-01")
# Leer archivo con informacion del ETF
Datos_ETF <- read.csv("Datos/IAK_holdings.csv", row.names=NULL, skip=10, stringsAsFactors=FALSE)
# guardar tickers
tk <- Datos_ETF$Ticker
# Descargar Precios
Datos <- list()
for(i in 1:length(tk)-55) {
Datos[[i]] <- Bajar_Precios(Columns=cs, Ticker=tk[i], Fecha_In=fs[1], Fecha_Fn=fs[2])
}
